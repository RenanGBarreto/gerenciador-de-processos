package vc.com.software.gerenciadordeprocessos;

import java.awt.event.MouseEvent;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Renan Gomes
 */
public final class IFListaDeProcessos extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFListaClientes
     */
    public IFListaDeProcessos() {
        initComponents();
        atualizaLista();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        br_NovoCliente = new javax.swing.JButton();
        btEditar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        txtBusca = new javax.swing.JTextField();
        btExcluir = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Lista de Processo");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/database16.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(450, 350));
        setPreferredSize(new java.awt.Dimension(600, 435));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);

        br_NovoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/add24.png"))); // NOI18N
        br_NovoCliente.setText("Criar Processo");
        br_NovoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                br_NovoClienteActionPerformed(evt);
            }
        });

        btEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/tag24.png"))); // NOI18N
        btEditar.setText("Editar Processo");
        btEditar.setEnabled(false);
        btEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarActionPerformed(evt);
            }
        });

        btCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/delete24.png"))); // NOI18N
        btCancelar.setText("Fechar");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel() {
            Processo[] s = new Processo[0];

            public int getSize() { return s.length; }
            public Object getElementAt(int i) { return s[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new CellRenderProcesso());
        jList1.setDoubleBuffered(true);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Buscar Processo:");

        txtBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscaActionPerformed(evt);
            }
        });
        txtBusca.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscaKeyTyped(evt);
            }
        });

        btExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/trash24.png"))); // NOI18N
        btExcluir.setText("Excluir Processo");
        btExcluir.setEnabled(false);
        btExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBusca, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(br_NovoCliente, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btEditar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel1)
                    .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(br_NovoCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btEditar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 272, Short.MAX_VALUE)
                        .addComponent(btCancelar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {br_NovoCliente, btCancelar, btEditar, btExcluir});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void br_NovoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_br_NovoClienteActionPerformed
        Principal.janelaPrincipal.mostraIFCriar(new IFProcesso(), false);
}//GEN-LAST:event_br_NovoClienteActionPerformed

    private void btEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarActionPerformed
        abrirProcessoSelecionado();
}//GEN-LAST:event_btEditarActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if ((Processo) jList1.getSelectedValue() == null) {
            return;
        }

        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            abrirProcessoSelecionado();
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
        if ((Processo) jList1.getSelectedValue() == null) {
            return;
        }
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            abrirProcessoSelecionado();
        }
    }//GEN-LAST:event_jList1KeyReleased

    private void btExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExcluirActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que quer EXCLUIR permanentemente o processo selecionado?", "Tem certeza que deseja excluir o processo?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                Principal.janelaPrincipal.deletarProcesso(((Processo) jList1.getSelectedValue()).getCaixa(), ((Processo) jList1.getSelectedValue()).getSequencia());
                JOptionPane.showMessageDialog(this, "O processo foi excluido com sucesso.", "Processo excluído com sucesso", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                Logger.getLogger(IFListaDeProcessos.class.getName()).log(Level.SEVERE, "Erro ao apagar o processo.", ex);
                JOptionPane.showMessageDialog(this, "O processo não pode ser excluído. Verifique os dados inseridos.", "Erro ao excluir cliente", JOptionPane.ERROR_MESSAGE);
            }
            atualizaLista();
        }
    }//GEN-LAST:event_btExcluirActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (!evt.getValueIsAdjusting()) {
            try {
                if (jList1 != null && jList1.getSelectedIndex() != -1 && ((Processo) jList1.getSelectedValue() != null)) {
                    btEditar.setEnabled(true);
                    btExcluir.setEnabled(true);
                } else {
                    btEditar.setEnabled(false);
                    btExcluir.setEnabled(false);
                }
            } catch (Exception e) {
            }
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void txtBuscaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscaKeyTyped
        atualizaLista();
    }//GEN-LAST:event_txtBuscaKeyTyped

    private void txtBuscaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscaKeyReleased
        atualizaLista();
    }//GEN-LAST:event_txtBuscaKeyReleased

    private void txtBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton br_NovoCliente;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btEditar;
    private javax.swing.JButton btExcluir;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtBusca;
    // End of variables declaration//GEN-END:variables

    public synchronized void atualizaLista() {

        Processo selecao = null;
        if (jList1.getSelectedValue() != null) {
            selecao = (Processo) jList1.getSelectedValue();
        }

        ArrayList<Processo> processos = new ArrayList<>();

        try {
            processos = Principal.janelaPrincipal.lerListaDeProcessos();
        } catch (Exception ex) {
            Logger.getLogger(IFListaDeProcessos.class.getName()).log(Level.SEVERE, null, ex);
        }

        String q = txtBusca.getText().trim().toLowerCase();

        ArrayList<Processo> tmp = new ArrayList<>();

        if (!q.isEmpty()) {
            for (Processo c : processos) {
                String busca = "";
                busca += c.getCaixa().toLowerCase();
                busca += c.getSequencia().toLowerCase();
                busca += c.getNome().toLowerCase();
                busca += c.getPlaca().toLowerCase();
                busca += c.getCpf_cnpj().toLowerCase();
                if (busca.contains(q)) {
                    tmp.add(c);
                }
            }
        } else {
            tmp.addAll(processos);
        }

        final Processo[] passa = tmp.toArray(new Processo[0]);
        Arrays.sort(passa);
        jList1.setModel(new javax.swing.AbstractListModel() {

            Processo[] strings = passa;

            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public Object getElementAt(int i) {
                return strings[i];
            }
        });

        try {
            if (selecao != null) {
                for (int i = 0; i < jList1.getModel().getSize(); i++) {
                    if (selecao.getSequencia().equals(((Processo) jList1.getModel().getElementAt(i)).getSequencia()) && selecao.getCaixa().equals(((Processo) jList1.getModel().getElementAt(i)).getCaixa())) {
                        jList1.setSelectedIndex(i);
                    }
                }
            }
        } catch (Exception e) {
        }
        jList1.repaint();
    }

    private void abrirProcessoSelecionado() {
        try {
            Principal.janelaPrincipal.mostraIFCriar(new IFProcesso(Principal.janelaPrincipal.lerProcesso(((Processo) jList1.getSelectedValue()).getCaixa(), ((Processo) jList1.getSelectedValue()).getSequencia())), false);

        } catch (Exception ex) {
            Logger.getLogger(IFListaDeProcessos.class.getName()).log(Level.SEVERE, "Erro ao ler o processo", ex);
            JOptionPane.showMessageDialog(
                    this, "O processo NÃO foi lido com sucesso.", "Erro ao abrir o processo", JOptionPane.ERROR_MESSAGE);
        }
    }

}
