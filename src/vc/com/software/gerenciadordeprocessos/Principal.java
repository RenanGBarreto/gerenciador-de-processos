package vc.com.software.gerenciadordeprocessos;

import java.awt.Desktop;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * Principal
 * 
 * @author Renan Gomes
 */
public class Principal extends javax.swing.JFrame {

    protected static final File PASTA_DADOS = new File(System.getProperty("user.home"), "GERENCIADOR_PROCESSOS-DADOS");
    private static final File ARQUIVO_DADOS_ATUAL = new File(PASTA_DADOS, "dados-gerenciadorprocessos-atual.db");
    private static final File ARQUIVO_B10 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-10.db");
    private static final File ARQUIVO_B9 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-9.db");
    private static final File ARQUIVO_B8 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-8.db");
    private static final File ARQUIVO_B7 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-7.db");
    private static final File ARQUIVO_B6 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-6.db");
    private static final File ARQUIVO_B5 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-5.db");
    private static final File ARQUIVO_B4 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-4.db");
    private static final File ARQUIVO_B3 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-3.db");
    private static final File ARQUIVO_B2 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-2.db");
    private static final File ARQUIVO_B1 = new File(PASTA_DADOS, "backup-automatico-dados-gerenciadorprocessos-1.db");

    public IFListaDeProcessos ifldp;

    public static Principal janelaPrincipal;

    public static ArrayList<Processo> processos = null;

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/pen-b-32.png")).getImage());
        setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btlistaprocessos = new javax.swing.JButton();
        btnovoprocesso = new javax.swing.JButton();
        desktop = new javax.swing.JDesktopPane();
        bg = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        marquivo = new javax.swing.JMenu();
        mbackup = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        mseparador1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        mprocesso = new javax.swing.JMenu();
        mnovoprocesso = new javax.swing.JMenuItem();
        mlistar = new javax.swing.JMenuItem();
        majuda = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        msobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sistema de Gerenciamendo de Processos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btlistaprocessos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/database24.png"))); // NOI18N
        btlistaprocessos.setText("Listar Processos");
        btlistaprocessos.setMaximumSize(new java.awt.Dimension(73, 35));
        btlistaprocessos.setMinimumSize(new java.awt.Dimension(73, 35));
        btlistaprocessos.setPreferredSize(new java.awt.Dimension(73, 35));
        btlistaprocessos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlistaprocessosActionPerformed(evt);
            }
        });

        btnovoprocesso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/add24.png"))); // NOI18N
        btnovoprocesso.setText("Novo Processo");
        btnovoprocesso.setMaximumSize(new java.awt.Dimension(73, 35));
        btnovoprocesso.setMinimumSize(new java.awt.Dimension(73, 35));
        btnovoprocesso.setPreferredSize(new java.awt.Dimension(73, 35));
        btnovoprocesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnovoprocessoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(btnovoprocesso, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btlistaprocessos, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(550, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnovoprocesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btlistaprocessos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        desktop.setBackground(new java.awt.Color(255, 255, 255));
        desktop.setMinimumSize(new java.awt.Dimension(800, 600));
        desktop.setPreferredSize(new java.awt.Dimension(1000, 800));

        bg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/bg.jpg"))); // NOI18N
        bg.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        bg.setOpaque(true);

        javax.swing.GroupLayout desktopLayout = new javax.swing.GroupLayout(desktop);
        desktop.setLayout(desktopLayout);
        desktopLayout.setHorizontalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, Short.MAX_VALUE, Short.MAX_VALUE)
            .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(desktopLayout.createSequentialGroup()
                    .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, 2074, Short.MAX_VALUE)
                    .addGap(607, 607, 607)))
        );
        desktopLayout.setVerticalGroup(
            desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(desktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(desktopLayout.createSequentialGroup()
                    .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, 904, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        desktop.setLayer(bg, -10000);

        marquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/attachment16.png"))); // NOI18N
        marquivo.setText("Arquivo");

        mbackup.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        mbackup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/toolbox16.png"))); // NOI18N
        mbackup.setText("Backup");
        mbackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mbackupActionPerformed(evt);
            }
        });
        marquivo.add(mbackup);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/folder16.png"))); // NOI18N
        jMenuItem3.setText("Abrir Pasta de Dados");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        marquivo.add(jMenuItem3);
        marquivo.add(mseparador1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/delete16.png"))); // NOI18N
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        marquivo.add(jMenuItem2);

        jMenuBar1.add(marquivo);

        mprocesso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/pen-b-16.png"))); // NOI18N
        mprocesso.setText("Processo");

        mnovoprocesso.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        mnovoprocesso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/add16.png"))); // NOI18N
        mnovoprocesso.setText("Novo Processo");
        mnovoprocesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnovoprocessoActionPerformed(evt);
            }
        });
        mprocesso.add(mnovoprocesso);

        mlistar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        mlistar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/database16.png"))); // NOI18N
        mlistar.setText("Listar Processos");
        mlistar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mlistarActionPerformed(evt);
            }
        });
        mprocesso.add(mlistar);

        jMenuBar1.add(mprocesso);

        majuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/heart16.png"))); // NOI18N
        majuda.setText("Ajuda");
        majuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                majudaActionPerformed(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/globe16.png"))); // NOI18N
        jMenuItem1.setText("Ajuda online...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        majuda.add(jMenuItem1);

        msobre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        msobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vc/com/software/gerenciadordeprocessos/img/id_card16.png"))); // NOI18N
        msobre.setText("Sobre");
        msobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msobreActionPerformed(evt);
            }
        });
        majuda.add(msobre);

        jMenuBar1.add(majuda);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktop, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(desktop, javax.swing.GroupLayout.PREFERRED_SIZE, 519, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mbackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mbackupActionPerformed
        try {
            String nome = escapeAlfaNumerico(JOptionPane.showInputDialog(this, "Digite o nome do Arquivo (Exemplo: 'backupdemarco'):", "")) + ".db";
            File novo = new File(Principal.PASTA_DADOS, nome);
            if (Principal.janelaPrincipal.criarPontoDeRestauracao(novo)) {
                JOptionPane.showMessageDialog(this, "O backup foi criado com sucesso.\nVerifique a pasta com com os arquivos de backup do programa.\nArquivo: " + novo.getAbsolutePath());
            }
            Principal.abrirpastaDados();
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, "Erro na criacao do backup", ex);
            JOptionPane.showMessageDialog(this, "Erro na criacao do backup. Escolha outro nome e verifique as permisões.", "Erro!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mbackupActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        fecharPrograma();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void mnovoprocessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnovoprocessoActionPerformed
        Principal.janelaPrincipal.mostraIFCriar(new IFProcesso(), false);
    }//GEN-LAST:event_mnovoprocessoActionPerformed

    private void mlistarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mlistarActionPerformed
        mostraIFListaDeProcessos();
    }//GEN-LAST:event_mlistarActionPerformed

    private void btnovoprocessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnovoprocessoActionPerformed
        Principal.janelaPrincipal.mostraIFCriar(new IFProcesso(), false);
    }//GEN-LAST:event_btnovoprocessoActionPerformed

    private void btlistaprocessosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlistaprocessosActionPerformed
        mostraIFListaDeProcessos();
    }//GEN-LAST:event_btlistaprocessosActionPerformed

    private void msobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msobreActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new JanelaSobre().setVisible(true);
            }
        });
    }//GEN-LAST:event_msobreActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        fecharPrograma();
    }//GEN-LAST:event_formWindowClosed

    private void majudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_majudaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_majudaActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Desktop desktop = null;
        desktop = Desktop.getDesktop();
        URI uri = null;
        try {
            uri = new URI("http://www.software.com.vc");
            desktop.browse(uri);
        } catch (IOException ioe) {
            Logger.getLogger(Principal.class.getName()).log(Level.WARNING, "Erro ao abrir a pagina", ioe);
        } catch (URISyntaxException use) {
            Logger.getLogger(Principal.class.getName()).log(Level.WARNING, "Erro ao abrir a pagina", use);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        abrirpastaDados();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        fecharPrograma();
    }//GEN-LAST:event_formWindowClosing

    static void abrirpastaDados() {
        try {
            Runtime.getRuntime().exec("explorer " + PASTA_DADOS.getAbsolutePath());
        } catch (java.io.IOException ex) {
        }
    }

    public static String escapeAlfaNumerico(String str) {
        if (str == null) {
            return null;
        }
        int sz = str.length();
        String resultado = "";
        for (int i = 0; i < sz; i++) {
            if (Character.isLetterOrDigit(str.charAt(i)) == true) {
                resultado += str.charAt(i);
            }
        }
        return resultado;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("file.encoding", "UTF-8");

        alteraLAF();
        ServerSocket serverSocket = null;
        Socket clientSocket = null;
        try {
            serverSocket = new ServerSocket(32475, 1);

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    janelaPrincipal = new Principal();
                    try {
                        janelaPrincipal.lerDados();
                    } catch (Exception ex) {
                        Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "Não foi possível ler os dados antigos do sistema. Um novo banco de dados foi iniciado. Se necessario, restaure o backup.", "Erro na inicialização.", JOptionPane.ERROR_MESSAGE);
                    }
                    janelaPrincipal.setVisible(true);
                }
            }
            );

            while (true) {
                clientSocket = serverSocket.accept();
                clientSocket.close();
            }
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "Apenas uma instância do programa pode ser aberta por vez. feche outros programas ou reinicie o computador.", "Erro na inicialização.", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void mostraIFCriar(JInternalFrame frame, boolean maximazado) {
        desktop.add(frame);
        frame.moveToFront();
        try {
            frame.setSelected(true);
            frame.setMaximum(maximazado);

        } catch (PropertyVetoException ex) {
            Logger.getLogger(Principal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        frame.setLocation((desktop.getWidth() / 2) - (frame.getWidth() / 2), (desktop.getHeight() / 2) - (frame.getHeight() / 2));
        frame.setVisible(true);
    }

    private void mostraIFListaDeProcessos() {
        if (ifldp == null || ifldp.isClosed() || !ifldp.isDisplayable()) {
            ifldp = new IFListaDeProcessos();
            desktop.add(ifldp);
        }
        ifldp.moveToFront();
        try {
            ifldp.setSelected(true);

        } catch (PropertyVetoException ex) {
            Logger.getLogger(Principal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        ifldp.setLocation((desktop.getWidth() / 2) - (ifldp.getWidth() / 2), (desktop.getHeight() / 2) - (ifldp.getHeight() / 2));
        ifldp.setVisible(true);
    }

    public static void alteraLAF() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (Exception ex) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception ex2) {
                try {
                    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            javax.swing.UIManager.setLookAndFeel(info.getClassName());
                            break;

                        }
                    }
                } catch (ClassNotFoundException ex3) {
                    java.util.logging.Logger.getLogger(Principal.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex3) {
                    java.util.logging.Logger.getLogger(Principal.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex3) {
                    java.util.logging.Logger.getLogger(Principal.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex3) {
                    java.util.logging.Logger.getLogger(Principal.class
                            .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void fecharPrograma() {
        if (JOptionPane.showConfirmDialog(null, "Tem certeza que quer sair do programa?", "Sair do Programa?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            try {
                salvarDados(processos);
            } catch (Exception ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Não foi possível. Salvar os dados do sistema. Talvez você precise recriar o processo.", "Erro ao salvar.", JOptionPane.ERROR_MESSAGE);

            }
            System.exit(0);
        }
    }

    public Processo lerProcesso(String caixa, String sequencia) {
        for (Processo processo : processos) {
            if (processo.getCaixa().trim().equalsIgnoreCase(caixa.trim()) && processo.getSequencia().trim().equalsIgnoreCase(sequencia.trim())) {
                return processo;
            }
        }
        return null;
    }

    public void deletarProcesso(String caixa, String sequencia) {

        for (int i = 0; i < processos.size(); i++) {
            Processo processo = processos.get(i);
            if (processo.getCaixa().trim().equalsIgnoreCase(caixa.trim()) && processo.getSequencia().trim().equalsIgnoreCase(sequencia.trim())) {
                processos.remove(processo);
                break;
            }
        }

        try {
            ifldp.atualizaLista();
        } catch (Exception e) {
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bg;
    private javax.swing.JButton btlistaprocessos;
    private javax.swing.JButton btnovoprocesso;
    private javax.swing.JDesktopPane desktop;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenu majuda;
    private javax.swing.JMenu marquivo;
    private javax.swing.JMenuItem mbackup;
    private javax.swing.JMenuItem mlistar;
    private javax.swing.JMenuItem mnovoprocesso;
    private javax.swing.JMenu mprocesso;
    private javax.swing.JPopupMenu.Separator mseparador1;
    private javax.swing.JMenuItem msobre;
    // End of variables declaration//GEN-END:variables

    ArrayList<Processo> lerListaDeProcessos() {
        return processos;
    }

    public void salvarProcesso(Processo p) {
        if (p != null) {
            for (int i = 0; i < processos.size(); i++) {
                Processo processo = processos.get(i);
                if (processo.getCaixa().trim().equalsIgnoreCase(p.getCaixa().trim()) && processo.getSequencia().trim().equalsIgnoreCase(p.getSequencia().trim())) {
                    processos.remove(processo);
                    break;
                }
            }
            processos.add(p);
        }
        try {
            ifldp.atualizaLista();
        } catch (Exception e) {
        }
        try {
            salvarDados(processos);
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Não foi possível. Salvar os dados do sistema. Talvez você precise recriar o processo.", "Erro ao salvar.", JOptionPane.ERROR_MESSAGE);

        }
    }

    private synchronized void salvarDados(ArrayList<Processo> dados) throws Exception {
        bakupAutomatico();
        //Usando Serializacao de Objetos Java     
        FileOutputStream fo = new FileOutputStream(ARQUIVO_DADOS_ATUAL);
        ObjectOutputStream oo = new ObjectOutputStream(fo);
        oo.writeObject(dados);
        oo.close();

    }

    private synchronized void bakupAutomatico() {
        Logger.getLogger(Principal.class
                .getName()).log(Level.INFO, "Tentando fazer o backup automatico para os dados.");

        try {
            ARQUIVO_B10.delete();
            ARQUIVO_B9.renameTo(ARQUIVO_B10);
            ARQUIVO_B8.renameTo(ARQUIVO_B9);
            ARQUIVO_B7.renameTo(ARQUIVO_B8);
            ARQUIVO_B6.renameTo(ARQUIVO_B7);
            ARQUIVO_B5.renameTo(ARQUIVO_B6);
            ARQUIVO_B4.renameTo(ARQUIVO_B5);
            ARQUIVO_B3.renameTo(ARQUIVO_B4);
            ARQUIVO_B2.renameTo(ARQUIVO_B3);
            ARQUIVO_B1.renameTo(ARQUIVO_B2);
            criarPontoDeRestauracao(ARQUIVO_B1);
        } catch (Exception e) {
            Logger.getLogger(Principal.class.getName()).log(Level.INFO, "Erro ao fazer o backup automatico. Motivo: {0}", e.getMessage());
        }
    }

    public synchronized
            boolean criarPontoDeRestauracao(File f) {
        Logger.getLogger(Principal.class
                .getName()).log(Level.INFO, "Tentando Criar o Ponto {0}.", f.getName());
        if (!f.exists()) {
            f.delete();
        }

        try {
            lerDados();
            salvarDados(processos, f);
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }

        Logger.getLogger(Principal.class
                .getName()).log(Level.INFO, "A cria\u00e7\u00e3o do ponto de restaura\u00e7\u00e3o foi concu\u00edda com sucesso. Ponto: {0}.", f.getName());

        return true;
    }

    private synchronized void salvarDados(ArrayList<Processo> dados, File f) throws Exception {
        if (!PASTA_DADOS.exists()) {
            if (!PASTA_DADOS.mkdirs()) {
                JOptionPane.showMessageDialog(null, "Infelizmente a pasta que armazenará os dados não pôde ser criada.\nVerifique as permisões e crie a pasta manualmente: " + PASTA_DADOS.getAbsolutePath());
            }
        }
        //Usando Serializacao de Objetos Java     
        FileOutputStream fo = new FileOutputStream(f);
        ObjectOutputStream oo = new ObjectOutputStream(fo);
        oo.writeObject(dados);
        oo.close();
    }

    private synchronized void lerDados() throws Exception {
        if (!PASTA_DADOS.exists()) {
            if (!PASTA_DADOS.mkdirs()) {
                JOptionPane.showMessageDialog(null, "Infelizmente a pasta que armazenará os dados não pôde ser criada.\nVerifique as permisões e crie a pasta manualmente: " + PASTA_DADOS.getAbsolutePath());
            }
        }
        if (processos != null) {
            return;
        }
        ObjectInputStream oi = null;
        try {
            //Usando Serializacao de Objetos Java  
            FileInputStream fi = new FileInputStream(ARQUIVO_DADOS_ATUAL);
            oi = new ObjectInputStream(fi);
            processos = (ArrayList<Processo>) oi.readObject();
        } catch (IOException | ClassNotFoundException exc) {
            exc.printStackTrace();
            processos = new ArrayList<>();
            salvarDados(processos);
        }
        if (oi != null) {
            oi.close();
        }
    }
}
